// Generated by CoffeeScript 1.7.1
(function() {
  var Firebase, activateDispatch, connect, dataSet, dates, db, dispatch, email, getText, getTodayInString, moment, num, phantom, phantomFetchWayback, populateQueue, queue, request, server, shutDown, updateAirTraffic, url, warnUser, warnings, waybackUrl, _i;

  Firebase = require("firebase");

  phantom = require("phantom");

  email = require("../../node_modules/emailjs");

  waybackUrl = 'http://archive.org/wayback/available?url=';

  request = require('request');

  url = require('url');

  moment = require('moment');

  dates = [];

  for (num = _i = 1; _i <= 5; num = ++_i) {
    dates.push(moment().subtract('days', 7 * num).format('YYYYMMDD'));
  }

  console.log(dates);

  db = new Firebase("https://kiwidb.firebaseio.com/");

  db.auth(process.env.CRAWLER_AUTH, function() {});

  server = void 0;

  connect = function() {
    server = email.server.connect({
      user: "thekiwioverlord",
      password: "kiwisforlife",
      host: "smtp.gmail.com",
      ssl: "true"
    });
  };

  connect();

  getText = function($node, target) {
    return $node.text();
  };

  getTodayInString = function() {
    var today;
    today = new Date();
    return today.toString();
  };

  warnUser = function(email, url, name) {
    server.send({
      text: "Hey " + name + ", our kiwi runner noticed a kiwi of yours tracking " + url + " got lost. We won't be able to track this one. We're not spammers so you won't get any more messages about lost kiwis.",
      from: "thekiwioverlord@gmail.com",
      to: email,
      subject: "One of your kiwis got lost"
    }, function(err, message) {
      console.log(err || message);
    });
  };

  dispatch = {};

  queue = [];

  dispatch.counter = 0;

  dataSet = {};

  warnings = 0;

  populateQueue = function() {
    var kiwi, kiwiList, user;
    for (user in dataSet) {
      kiwiList = dataSet[user].kiwis;
      for (kiwi in kiwiList) {
        queue.push(kiwiList[kiwi]);
      }
    }
    console.log(queue.length + " kiwis to crawl.");
  };

  updateAirTraffic = function() {
    if ((dispatch.counter < 4) && queue[queue.length - 1]) {
      dispatch.counter++;
      console.log("Dispatched " + dispatch.counter + " phantoms. Now fetching kiwi at " + queue[queue.length - 1].destination);
      console.log(queue.length - 1 + " kiwis remaining. " + warnings + " warnings issued.");
      phantomFetchWayback(queue.pop());
    }
  };

  activateDispatch = function() {
    setInterval((function() {
      updateAirTraffic();
    }), 200);
  };

  db.once("value", function(snapshot) {
    console.log("Firebase connection established.");
    snapshot.forEach(function(item) {
      var count, user;
      for (user in item.val()) {
        dataSet[user] = {};
      }
      for (user in dataSet) {
        count = Object.keys(item.val()[user].kiwis).length;
        if (count === 1) {
          dataSet[user].notified = item.val()[user].settings.notified;
          dataSet[user].email = item.val()[user].settings.email;
          dataSet[user].name = item.val()[user].settings.name;
          dataSet[user].kiwiPath = "https://kiwidb.firebaseio.com/users/" + user + "/kiwis";
          dataSet[user].firebase = new Firebase(dataSet[user].kiwiPath);
          dataSet[user].kiwis = {};
          dataSet[user].firebase.once("value", (function(snapshot) {
            var collectedDates, date, kiwi, kiwiUrl, parsed, smega, _j, _len;
            for (kiwi in snapshot.val()) {
              user = this.user;
              kiwiUrl = snapshot.val()[kiwi].url;
              parsed = url.parse(kiwiUrl);
              collectedDates = {};
              for (_j = 0, _len = dates.length; _j < _len; _j++) {
                date = dates[_j];
                smega = waybackUrl + parsed.hostname + parsed.pathname.match(/.*\//g)[0] + '&timestamp' + date;
                console.log(smega);
                request(smega, function(err, res, body) {
                  var archived, isAvailable, result, timestamp, waybackPath;
                  result = JSON.parse(body);
                  archived = result.archived_snapshots.closest;
                  isAvailable = archived.available;
                  timestamp = archived.timestamp;
                  waybackPath = archived.url;
                  if (archived.available) {
                    if (!collectedDates[timestamp]) {
                      collectedDates[timestamp] = archived.url;
                      console.log(JSON.parse(body));
                      return dataSet[user].kiwis[kiwi] = {
                        name: dataSet[user].name,
                        user: user,
                        email: dataSet[user].email,
                        notified: dataSet[user].notified,
                        path: snapshot.val()[kiwi].path,
                        url: waybackPath,
                        destination: dataSet[user].kiwiPath + "/" + kiwi + "/values"
                      };
                    }
                  }
                });
              }
            }
          }), {
            user: user
          });
        }
      }
    });
    setTimeout((function() {
      populateQueue();
      activateDispatch();
    }), 5000);
  });

  shutDown = function(passedIn, phantom) {
    dispatch.counter--;
    if (dispatch.counter === 0) {
      setTimeout((function() {
        process.exit();
      }), 8000);
    }
    phantom.exit();
  };

  phantomFetchWayback = function(kiwi) {
    phantom.create(function(ph) {
      ph.createPage(function(page) {
        page.open(kiwi.url, function(status) {
          page.includeJs("http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js", function() {
            page.evaluate((function(kiwi) {
              var $, text;
              if (!$ && jQuery) {
                $ = jQuery;
              }
              text = $(kiwi.path).text().trim();
              return {
                user: kiwi.user,
                text: text,
                url: kiwi.url,
                path: kiwi.path,
                name: kiwi.name,
                email: kiwi.email,
                notified: kiwi.notified,
                destination: kiwi.destination
              };
            }), (function(result) {
              var dataRef, settingsRef;
              console.log('result', result);
              if (result.text.length < 1 && result.notified === "false") {
                warnings++;
                warnUser(result.email, result.url, result.name);
                settingsRef = new Firebase("https://kiwidb.firebaseio.com/users/" + result.user + "/settings");
                settingsRef.update({
                  notified: "true"
                }, function() {
                  shutDown(null, ph);
                });
              } else if (result.text.length < 1) {
                shutDown(null, ph);
              } else {
                dataRef = new Firebase(result.destination);
              }
            }), kiwi);
          });
        });
      });
    });
  };

}).call(this);
